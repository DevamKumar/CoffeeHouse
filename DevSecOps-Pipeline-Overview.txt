DevOps Mega Project: End-to-End Pipeline
Project Overview
This project demonstrates a comprehensive DevSecOps pipeline for a Spring Boot application, leveraging Infrastructure as Code, container orchestration, and GitOps for automated, secure, and observable deployments on AWS EKS.

Application Details
Backend: Java, Spring Boot (RESTful API/Microservice)

Database: MongoDB

Source Code: GitHub Repository

ðŸš€ The DevSecOps Pipeline Flow ðŸš€
graph TD
    A[Developer Push Code<br>to GitHub] --> B(Jenkins Trigger<br>Webhook);
    B --> C(Build Application<br>& Run Unit Tests);
    C --> D{DevSecOps Scans};
    D -- SonarQube (SAST) --> E[Code Quality & Security Report];
    D -- OWASP Dependency-Check --> F[Dependency Vulnerabilities];
    D -- Trivy (Image Scan) --> G[Container Image Vulnerabilities];
    E -- All Checks Pass? --> H(Build Docker Image);
    F -- All Checks Pass? --> H;
    G -- All Checks Pass? --> H;
    H --> I(Push Image to ECR);
    I --> J(Update K8s Manifests<br>in GitRepo);
    J --> K{ArgoCD Detects Change<br>in GitRepo};
    K --> L(ArgoCD Deploys to EKS Cluster);
    L --> M(Application Running<br>on EKS Nodes);
    M --> N(Prometheus Collects Metrics);
    N --> O(Grafana Visualizes & Alerts);

    subgraph Infrastructure Setup (Terraform)
        P[Provision AWS IAM] --> Q[Provision Key Pair];
        Q --> R[Provision Security Groups];
        R --> S[Provision Master Machine (Jenkins Host)];
        S --> T[Provision EKS Cluster (Nodes 1, 2)];
    end

    subgraph DevSecOps Tools (Jenkins & Security)
        Jenkins; Trivy; OWASP; Sonar; Docker; Mail;
    end

    subgraph Kubernetes & GitOps
        EKS_Cluster[EKS Cluster]; GitRepo[GitRepo]; ArgoCD;
    end

    subgraph Monitoring
        Prometheus; Grafana;
    end

    style A fill:#D0E8F2,stroke:#333,stroke-width:2px;
    style M fill:#D0E8F2,stroke:#333,stroke-width:2px;
    style J fill:#FFDDC1,stroke:#333,stroke-width:2px;
    style L fill:#FFDDC1,stroke:#333,stroke-width:2px;
    style H fill:#E6FFCC,stroke:#333,stroke-width:2px;
    linkStyle 0 stroke-width:2px,fill:none,stroke:green;
    linkStyle 1 stroke-width:2px,fill:none,stroke:green;
    linkStyle 2 stroke-width:2px,fill:none,stroke:green;
    linkStyle 3 stroke-width:2px,fill:none,stroke:blue;
    linkStyle 4 stroke-width:2px,fill:none,stroke:blue;
    linkStyle 5 stroke-width:2px,fill:none,stroke:blue;
    linkStyle 6 stroke-width:2px,fill:none,stroke:orange;
    linkStyle 7 stroke-width:2px,fill:none,stroke:orange;
    linkStyle 8 stroke-width:2px,fill:none,stroke:purple;
    linkStyle 9 stroke-width:2px,fill:none,stroke:purple;
    linkStyle 10 stroke-width:2px,fill:none,stroke:darkred;
    linkStyle 11 stroke-width:2px,fill:none,stroke:darkred;
    linkStyle 12 stroke-width:2px,fill:none,stroke:darkgreen;
    linkStyle 13 stroke-width:2px,fill:none,stroke:darkgreen;

Detailed Breakdown of Components:
Master Machine (Infrastructure & Core Tools)

IAAC (Infrastructure as Code):

Terraform: Provisions and manages AWS resources:

IAM: Roles, policies for secure access.

Key Pair: SSH access for instances.

Security Groups: Network access control.

DevSecOps Orchestration:

Jenkins: CI/CD automation server.

Trivy: Docker image vulnerability scanning.

OWASP Dependency-Check: Dependency vulnerability analysis.

Sonar (SonarQube): Static code analysis & quality gates.

Docker: Containerization engine.

Mail: Email notifications for pipeline status.

Kubernetes Cluster (EKS)

Platform: AWS EKS (Elastic Kubernetes Service)

Worker Nodes: Node 1, Node 2 (Scalable compute for applications)

GitOps (Declarative Deployments)

GitRepo: Dedicated GitHub repository for Kubernetes manifests (Deployment, Service, Ingress, etc.).

ArgoCD: GitOps tool deployed in EKS, continuously synchronizes cluster state with GitRepo.

Monitoring & Observability

Prometheus: Metrics collection and time-series database.

Grafana: Visualization dashboards and alerting for application and infrastructure health.